---
title: "Lab 2: Multiplexed 7-Segment Display"
author: "Avery Smith"
date: "8/27/24"
categories:
draft: false
---

## Lab 2: Multiplexed 7-Segment Display
Time spent: 12 Hours
[GitHub Repository]

## Main Goals
The point of this lab is to drive two seven-segment displays using one seven-segment encoder. This was to be achieved by generating a time-multiplexed display signal meaning the output of the encoder will switch rapidly between what display 1 and 2 should read, along with corresponding enable signals for each display. In general, multiplexing can decrease cost since a single piece of hardware can be used for many purposes. Additionally, the sum should be displayed on 5 LEDs.

## Summary
To meet these goals, I designed the following layout.
![](images/block_diagram.jpg)
The system takes in s1, and s2 (set by the onbaord and one external dip-switch) and outputs sum: the sum signal to send to the leds, seg: the 7-seg encoded signal for the display, and en1 and en2: enable signals to switch between active displays. 

I chose to switch active displays at F = 1.46kHz (12MHz/2^13) since this is well above the threshold for humans to percieve flickering, but slow enough that hardware issues are not a concnern. I decided to implement this with a clock divider since it was the simplest way to implement this functionality, but in more complicated sequential design requiring low-freuency flops, they should take in an enable signal.

I wrote the top module and created the elements in a Radiant project and checked the netlist analyzer to make sure it matched my intended design. Sure enough it did, except for the segment encoder (again, but at this point it will be a running bit since it still works!)

Top:
![](images/top_radiant.png)

Adder:
![](images/adder.png)

Time Mux:
![](images/time_mux.png)

Segment Encoder:
![](images/segment_driver.png)

I used QuestaSim to simulate the adder and time_mux modules. After some tweaking, the adder and time multiplexer worked as expected

Adder:![](images/adder_tb.png)

Time Multiplexer: ![](images/time_mux_tb.png)

Since I had already simulated the encoder last week, I skipped that and went right to simulating the top module. Some further fixing and tweaking, and it worked as expected (although I forgot to take a screenshot).

A consideration for this lab, and any FPGA project is how to drive all the necessary hardware without exceeding the current limit of the FPGA pins. The suggested current limit is +/- 8mA. This value is not a strict limit, and as we saw last lab, the current into a pin can reach 15mA-20mA without issue. However, since the common-anode displays must be supplied with much more current than this, two 2N3906 PNP transistors were used to drive the enable signals for the displays. The base signals of the transistors were connected to the FPGA, so current will flow from collector to emmitter when the FPGA pins are pulled low. 510Ohm resistors were used to limit the 3.3V current through the base node to 5.2mA (I = 510/3.3). I used 470Ohm resistors for the LEDs to get 7.0mA and 150Ohm for the segment display to get 22mA, but since we did that last lab, I know it will work. The schamtic for each element is below.

![](images/schematic.jpg)

With the circuit assembled and the logic designed, the FPGA was ready for programming. The system worked as expected for most inputs, but for certain combinations, the left segment display was flickering terribly, and the sum leds were inconsistent in their bit assignment. After poking around with Prof. Brake, we determined that the issue lied somehwere in the hardware. Some input pins seemed to have continuity with the output which was causing interference. The extent of the flickering could be changed by wiggling the connector from the dev board to the bread board, so that was likely the culprit.

I'm coming back to this, but at this point, the stock room is locked, so I can't try another ribbon cable. Next steps include asking prof. Brake for help, using the FPGA directly on the breadboard, or (though hopefully not), turning in what I have now. 