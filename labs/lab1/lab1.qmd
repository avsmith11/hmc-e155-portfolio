---
title: "Lab 1: FPGA and MCU Setup and Testing Introduction"
author: "Avery Smith"
date: "9/3/24"
categories:
  - reflection
  - labreport
draft: false
---

## Lab 1: FPGA and MCU Setup and Testing Introduction
Time spent: 15 hours

[GitHub Repository](https://github.com/avsmith11/e155-lab1)

### Main Goals:

This week, I soldered the dev-board including through-hole and surface-mount technology. I also set up and learned to use the programs used to make this website (Quarto, GitHub) and interface with the FPGA and MCU (QuestaSim, Radiant, Segger, and more GitHub). Finally, I wrote a System Verilog module to control a 7-segment hexadecimal display, built the accompanying circuit, and uploaded it to the FPGA.


### Summary:
I won't go into much detail about the first few parts, since although they took the majority of my time this week, the process of soldering or learning to use tools is not particularly interesting. Instead, I will focus on the design of the final module.


The main goal was to make a program to make a seven-segment representation of a hex digit corresponding to 4 dip switches on the dev board. In addition, we were asked to make one of the onboard LEDs blink at 2.4Hz and two more change their states based on the switch positions.


The system verilog for this week was straightforward. First, I figured out how to blink the LED. The lab description suggested we use the configurable high-speed oscillator (HSOSC) on the FPGA. I set the frequency to 24MHz and then created a counter to reset at 10,000,000. Since 24MHz/10,000,000 = 2.4Hz, I made the LED change every time the counter resets.

The following is a block diagram of my intended design.

![](images/Block-Diagram.jpg)

The truth tables given for the two other onboard LEDs could be represented as an XOR operator on the first two bits and an AND on the second two. This was easily accomplished with assign statements. Then, I used a case statement to encode the truth table for display outputs.


Once this was written, I chased errors mostly due to bad syntax before I imported the file to QuestaSim. Getting QuestaSim to work as expected was more difficult than expected, but after using Radiant's simulation wizard to create a new QuestaSim project that included the source program and the libraries for the FPGA (which included the HSCOSC module). Since QuestaSim uses a different compiler than Radiant, there were some more syntax issues I needed to fix. After this was done, I used force commands as suggested to set the switch positions and observed the output in the wave view.

![](images/sim1.png)

![](images/sim2.png)

I had some issues getting the s bus to change value even after force statements, but what I saw made enough sense that I decided to move on. Though I didn't know it at the time, I had ordered the bits of the 7-segment display opposite of what I wanted, which you can see in the figures above.

After a moderately successful simulation, I looked at the block diagram given by Radiant. 

![](images/top_schematic.png)

As you can see, despite the very large number required by the counter, the structure is fairly simple. I was also curious how the seg_driver was interpreted, so I found its schematic. I would expect this block to be some K-map simplified gate array, but instead, I saw this 

![](images/seg_schematic.png)


This diagram was interesting, and I'd love to learn what Radiant thinks it's doing here but I decided to move on and trust the process. Prof. Brake suggested that the long binary encodes some information like a lookup table would, but this is clearly not the hardware I implied.


At this point, I had already assembled the 7-segment display circuit. The displays we used have a common-cathode design, meaning the display is powered by one pin, and each segment can be toggled by setting its corresponding pin low so current can drain through the LED. I placed a current-limiting resistor at the anode of each segment. This uses more resistors than having on at the common cathode, but ensures the current through each segment does not depend on how many are lit in total. The lab description suggests 5-20mA. I found the value of the resistor with R = 5V/20mA = 250Ohms.

![](images/Schematic.jpg)


With the circuit assembled and the pins connected to the FPGA, all that was left was to assign pins (I kept track of the 7-segment display's pins in a text document in the GitHub repo) and upload to the board. I did this but found that a few things still needed to be fixed. 

![First Attempt](images/fail.jpg){width=50%}


One segment was not lighting at all as shown in the figure above, and several of the digits were incorrect. I fixed the first issue by changing which pin the segment used. The second issue was caused by the reverse-ordered bits in the seg bus. Once I fixed this, the display was working correctly and met the requirements of the lab. All 16 digits are shown below for your viewing pleasure.

![0](images/0.jpg){width=50%}

![1](images/1.jpg){width=50%}

![2](images/2.jpg){width=50%}

![3](images/3.jpg){width=50%}

![4](images/4.jpg){width=50%}

![5](images/5.png){width=50%}

![6](images/6.jpg){width=50%}

![7](images/7.jpg){width=50%}

![8](images/8.jpg){width=50%}

![9](images/9.jpg){width=50%}

![A](images/A.jpg){width=50%}

![b](images/b.jpg){width=50%}

![c](images/c.jpg){width=50%}

![d](images/d.jpg){width=50%}

![e](images/e.jpg){width=50%}

![f](images/f.jpg){width=50%}